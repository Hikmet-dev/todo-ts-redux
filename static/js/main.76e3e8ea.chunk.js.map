{"version":3,"sources":["components/CreateToDo.tsx","instance.ts","features/task/taskSlice.ts","components/Pagination.tsx","features/task/ToDoListItem.tsx","components/ItemPerPageFilter.tsx","features/filter/filterSlice.ts","components/DoneSort.tsx","components/DateSort.tsx","features/filter/FilterPanel.tsx","features/task/ToDoList.tsx","components/Input.tsx","features/user/userSlice.ts","features/auth/authSlice.ts","features/auth/LogIn.tsx","features/auth/SignUp.tsx","features/auth/Auth.tsx","components/NavBar.tsx","features/error/errorSlice.ts","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["CreateToDo","props","handleNewToDo","TextField","margin","id","label","variant","size","fullWidth","type","onKeyPress","e","instance","axios","create","baseURL","process","fetchTask","createAsyncThunk","URL","a","getState","filter","task","get","params","order","filterBy","page","taskCount","res","data","createTask","name","post","changeTask","changingTask","putshData","done","patch","deleteTask","taskId","delete","taskSlice","createSlice","initialState","tasks","pageCount","isLoading","hasError","reducers","changeActivePage","state","action","payload","changeTaskCount","extraReducers","builder","addCase","pending","fulfilled","rejected","actions","selectTasks","selectPageCount","selectIsLoading","selectPage","selectTaskCount","Pagination","dispatch","useDispatch","activePage","useSelector","pageArr","Array","fill","map","i","handleClick","currentTarget","value","Number","ButtonGroup","color","aria-label","Button","onClick","undefined","length","ToDoListItem","useState","changeInput","setChangeInput","disab","setDisab","date","createdAt","match","time","dateTime","replace","Grid","container","ListItem","item","xs","ListItemIcon","Checkbox","onChange","target","checked","changeDoneStatus","defaultValue","autoFocus","onBlur","onKeyDown","key","trim","changeTaskName","onKeyUp","ListItemText","primary","ListItemSecondaryAction","IconButton","edge","disabled","ItemPerPageFilter","Select","labelId","changeItemPerPageFilter","MenuItem","filterSlice","filterByButtons","orderValue","changeOrder","changeFilterBy","selectOrderValue","selectFilterBy","selectOrder","toUpperCase","selectFilterByButtons","DoneSort","button","DateSort","useStyles","makeStyles","theme","root","flexGrow","paper","paddingTop","spacing","paddingBottom","palette","text","secondary","justifyContent","FilterPanel","onChangeItemFilter","itemPerPage","classes","className","alignItems","Typography","ToDoList","useEffect","sessionStorage","token","Container","maxWidth","List","LinearProgress","Input","useField","field","meta","error","touched","helperText","fetchUser","user","thunkAPI","userRegistration","firstName","lastName","userSlice","clearUserData","setItem","selectFirstName","selectLastName","authSlice","loginForm","authStatus","toggleLoginForm","toggleAuthStatus","logOut","clear","selectLoginForm","auth","selectAuthStatus","LogIn","initialValues","email","password","validationSchema","Yup","required","min","onSubmit","values","setSubmitting","autoComplete","SignUp","Auth","justify","menuButton","marginRight","title","NavBar","LoginForm","AppBar","position","Toolbar","align","errorSlice","errorStatus","statusCode","message","errorStack","createError","closeError","selectErrorStatus","selectErrorStatusCode","selectErrorMesage","App","errorStatusCode","errorMessage","useLayoutEffect","getItem","decode","jwt","split","Date","now","exp","defaults","headers","Snackbar","open","autoHideDuration","onClose","event","reason","Alert","severity","AlertTitle","store","configureStore","reducer","authClise","Boolean","window","location","hostname","interceptors","request","use","Promise","reject","response","includes","status","console","log","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.76e3e8ea.chunk.js","sourcesContent":["import React from 'react';\nimport { TextField } from '@material-ui/core';\n\nexport const  CreateToDo = (props: any) =>  {\n    const {handleNewToDo} = props;\n    return (\n        <TextField \n        margin='normal'\n        id=\"outlined-basic\" \n        label=\"New to do\" \n        variant=\"outlined\" \n        size=\"small\" \n        fullWidth \n        type=\"text\" \n        onKeyPress={e =>handleNewToDo(e)} \n        />\n        )\n};","import axios from 'axios';\n\nexport const instance = axios.create({\n    baseURL: process.env.REACT_APP_LINK\n});","import { RootState} from './../../app/store';\nimport { createAsyncThunk, PayloadAction, createSlice } from '@reduxjs/toolkit';\nimport { instance } from '../../instance';\nimport { Filters } from '../filter/filterSlice';\n\nexport interface Task {\n        id: string;\n        name: string;\n        done: boolean;\n        createdAt: string;\n}\n\nexport interface Tasks {\n    tasks: Task[];\n    pageCount: number;\n};\n\ninterface TaskState extends Tasks {\n    page: number;\n    isLoading: boolean;\n    hasError: boolean;\n    taskCount: number;\n};\n\nexport interface QueryURL {\n    order: string;\n    filterBy: string;\n    page: number;\n    taskCount: number;\n};\n\nexport const fetchTask = createAsyncThunk(\n    'task/fetchTask',\n    async(URL, {getState}) => {\n        const {filter} = getState() as {filter: Filters};\n        const {task} = getState() as {task: TaskState}\n        const res = await instance.get('tasks', \n        {params: {\n            order: filter.order,\n            filterBy: filter.filterBy,\n            page: task.page,\n            taskCount: task.taskCount\n        }});\n        return res.data;\n    }\n)\n\nexport const createTask = createAsyncThunk<Tasks, string, {state: RootState}>(\n    'task/createTask',\n    async(name , {getState}) => {\n        const {filter} = getState() as {filter: Filters};\n        const {task} = getState() as {task: TaskState}\n\n        const res = await instance.post('task', {name: name}, {params: {\n            order: filter.order,\n            filterBy: filter.filterBy,\n            page: task.page,\n            taskCount: task.taskCount\n        }}\n        );        \n        return res.data;\n    }\n);\n\nexport const changeTask = createAsyncThunk<Tasks, {id: string, name?: string, done?: boolean}, {state: RootState} >(\n    'task/changeTask',\n    async(changingTask, {getState}) => {\n        const {filter} = getState() as {filter: Filters};\n        const {task} = getState() as {task: TaskState};\n\n        let putshData;\n        if(changingTask.name)  putshData = {name: changingTask.name};\n        if(typeof changingTask.done === 'boolean') putshData = {done: changingTask.done} ;\n\n\n        const res = await instance.patch(`task/${changingTask.id}`,\n            putshData,\n            {params: {\n                order: filter.order,\n                filterBy: filter.filterBy,\n                page: task.page,\n                taskCount: task.taskCount\n            }});\n            return res.data;\n    }\n);\n\nexport const deleteTask = createAsyncThunk<Tasks, string, {state: RootState}>(\n    'task/deleteTask',\n    async(taskId, {getState}) => {\n        const {filter} = getState() as {filter: Filters};\n        const {task} = getState() as {task: TaskState};\n\n        const res = await instance.delete(`task/${taskId}`, \n        {params: {\n            order: filter.order,\n            filterBy: filter.filterBy,\n            page: task.page,\n            taskCount: task.taskCount\n        }});\n        return res.data;\n    }\n);\n\nconst initialState: TaskState = {\n    tasks: [],\n    pageCount: 1,\n    page: 1, \n    isLoading: false,\n    hasError: false,\n    taskCount: 5\n};\n\nexport const taskSlice = createSlice({\n    name: 'task',\n    initialState,\n    reducers: {\n        changeActivePage: (state, action: PayloadAction<number>) => {\n            state.page = action.payload;\n        },\n        changeTaskCount: (state, action: PayloadAction<number>) => {\n            state.taskCount = action.payload;\n        }\n    },\n    extraReducers: builder => {\n        builder.addCase(fetchTask.pending, (state) => {\n            state.isLoading = false;\n        })\n        builder.addCase(fetchTask.fulfilled, (state, action: PayloadAction<Tasks>) => {\n            state.tasks = action.payload.tasks;\n            state.pageCount = action.payload.pageCount;\n            state.isLoading = true;\n        })\n        builder.addCase(fetchTask.rejected, (state) => {\n            state.isLoading = true;\n            state.hasError = true;\n        })\n        builder.addCase(createTask.pending, (state) => {\n            state.isLoading = true;\n        })\n        builder.addCase(createTask.fulfilled, (state, action) => {           \n            state.tasks = action.payload.tasks;\n            state.pageCount = action.payload.pageCount;\n            state.isLoading = true\n            \n        })\n        builder.addCase(createTask.rejected,  (state) => {\n            state.isLoading = true;\n            state.hasError = true;\n        })\n        builder.addCase(changeTask.pending, (state) => {\n            state.isLoading = true;\n        })\n        builder.addCase(changeTask.fulfilled, (state, action: PayloadAction<Tasks>) => {\n            state.tasks = action.payload.tasks;\n            state.pageCount = action.payload.pageCount;\n            state.isLoading = true\n        })\n        builder.addCase(changeTask.rejected, (state)=> {\n            state.isLoading = true;\n            state.hasError = true;\n        })\n        builder.addCase(deleteTask.pending, (state) => {\n            state.isLoading = true;\n        })\n        builder.addCase(deleteTask.fulfilled, (state, action: PayloadAction<Tasks>) => {\n            state.tasks = action.payload.tasks;\n            state.pageCount = action.payload.pageCount;\n            state.isLoading = true;\n        })\n        builder.addCase(deleteTask.rejected, (state)=> {\n            state.isLoading = true;\n            state.hasError = true;\n        })\n    }\n});\n\nexport const {changeActivePage, changeTaskCount} = taskSlice.actions;\n\nexport const selectTasks = (state: RootState) => state.task.tasks;\nexport const selectPageCount = (state: RootState) => state.task.pageCount;\nexport const selectIsLoading = (state: RootState) => state.task.isLoading;\nexport const selectPage = (state: RootState) => state.task.page;\nexport const selectTaskCount = (state: RootState) => state.task.taskCount;\n\nexport default taskSlice.reducer;","import React from 'react';\nimport { ButtonGroup, Button } from '@material-ui/core';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { changeActivePage, selectPageCount, selectPage, fetchTask } from '../features/task/taskSlice';\n\nexport const  Pagination = () =>  {\n    const dispatch = useDispatch();\n    const activePage = useSelector(selectPage);\n    const pageCount = useSelector(selectPageCount);\n    const pageArr = new Array(pageCount).fill(1).map((e, i) => i + 1);\n    const handleClick = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        if (typeof e.currentTarget.value === 'string') {\n            dispatch(changeActivePage(Number(e.currentTarget.value)));\n            dispatch(fetchTask());\n        }\n    };\n    return (\n        <ButtonGroup\n            color=\"primary\" \n            aria-label=\"contained button group\">            \n            <Button \n                onClick={e => handleClick(e)} \n                value={1}\n                ><ArrowBackIcon /></Button>\n                {pageArr.map(page => \n                                <Button \n                                    key={`item-${page}`} \n                                    onClick={e => handleClick(e)}\n                                    value={page}\n                                    variant={ activePage === page ? 'contained' : undefined}\n                                    >{page}</Button>)}\n            <Button\n            onClick={e => handleClick(e)} \n            value={pageArr.length}\n            ><ArrowForwardIcon /></Button>\n        </ButtonGroup>\n    );\n};","import React, { useState } from 'react';\nimport { ListItemText , ListItem, ListItemIcon, ListItemSecondaryAction, IconButton, Checkbox, Input, Grid } from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { useDispatch } from 'react-redux';\nimport { deleteTask, Task, changeTask } from './taskSlice';\nexport const ToDoListItem = (props: {task: Task} ) => {\n  const {task} = props;\n  const dispatch = useDispatch();\n  const [changeInput, setChangeInput] = useState(false);\n  const [disab, setDisab] = useState(false);\n\n  const changeTaskName = (e: React.KeyboardEvent<HTMLElement> | \n    React.ChangeEvent<HTMLElement>) =>  { \n      const {key} = (e as React.KeyboardEvent<HTMLDivElement>);\n      const {target} = (e as React.ChangeEvent<HTMLInputElement>);\n      if (key === 'Enter' && target.value.trim()){\n        dispatch(changeTask({id: target.name, name: target.value}))\n      }\n  };\n\n  const changeDoneStatus = (e: React.ChangeEvent<HTMLInputElement>) => {\n      const {target} = (e as React.ChangeEvent<HTMLInputElement>);\n      if(typeof target.checked=== 'boolean') {\n        dispatch(changeTask({id: target.name, done: target.checked}));\n      }\n    };\n\n  const date = task.createdAt.match(/([12]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01]))/);\n  const time = task.createdAt.match(/T(((([0-1][0-9])|(2[0-3])):?[0-5][0-9]))/g);\n  const dateTime: string =  date !== null && time !== null ? `${time[0].replace('T', '')} ${date[0]}`: \"Not date\";\n\n return(\n   <Grid container>\n    <ListItem>\n      <Grid item xs={1}>\n      <ListItemIcon>\n        <Checkbox \n          color=\"primary\"\n          name={task.id}  \n          onChange={(e)=> changeDoneStatus(e)} \n          checked={task.done} \n          value={task.id} \n        />\n      </ListItemIcon>\n      </Grid>\n      <Grid item xs={8}>\n      {changeInput \n        ? (<Input\n            fullWidth\n            defaultValue={task.name}\n            autoFocus={true}\n            name={task.id}\n            onBlur={() => setChangeInput(!changeInput)} \n            onKeyDown={(e: React.KeyboardEvent<HTMLInputElement>) => e.key === \"Escape\" && setChangeInput(false)} \n            onKeyPress={e => changeTaskName(e)}\n            onKeyUp={(e: React.KeyboardEvent<HTMLInputElement>) => e.key === \"Enter\" &&  setChangeInput(false)}\n          />) \n        : (<ListItemText  \n            primary={task.name}  \n            onClick={() => setChangeInput(!changeInput)}\n          />)\n      }\n      </Grid>\n        <Grid item xs={2}>\n        <ListItemText  primary={dateTime} />\n        </Grid>\n      <Grid item xs={1}>\n        <ListItemSecondaryAction>\n                    <IconButton \n                      edge=\"end\" \n                      disabled={disab} \n                      aria-label=\"delete\" \n                      onClick={(e) => {dispatch(deleteTask(e.currentTarget.value)); setDisab(true);}} \n                      value={task.id}>\n                      <DeleteIcon />\n                    </IconButton>\n        </ListItemSecondaryAction>\n        </Grid>\n        </ListItem>\n   </Grid>\n      \n )   \n};","import React from 'react';\nimport { Select, MenuItem } from \"@material-ui/core\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { changeActivePage, changeTaskCount, fetchTask, selectTaskCount } from '../features/task/taskSlice';\n\nexport const ItemPerPageFilter = () => {\n  const taskCount = useSelector(selectTaskCount);\n  const dispatch = useDispatch();\n  const changeItemPerPageFilter = (e: React.ChangeEvent<{ value: unknown }>) => { \n      dispatch(changeTaskCount(Number(e.target.value as string)));\n      dispatch(changeActivePage(1));\n      dispatch(fetchTask());\n};\n\n  return(\n    <Select\n      labelId=\"demo-simple-select-label\"\n      id=\"demo-simple-select\"\n      value={taskCount}\n      onChange={e => changeItemPerPageFilter(e)}\n    >\n      <MenuItem value={5}>5</MenuItem>\n      <MenuItem value={10}>10</MenuItem>\n      <MenuItem value={20}>20</MenuItem>\n    </Select>\n  )\n}","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\n\nexport interface Filters {\n    filterByButtons: string[];\n    filterBy: string;\n    orderValue: string[];\n    order: string;\n}\n\n\n\nconst initialState: Filters = {\n    filterByButtons: ['all', 'done', 'undone'],\n    filterBy: 'all',\n    orderValue: ['ASC', 'DESC'],\n    order: 'DESC'\n};\n\nexport const  filterSlice = createSlice({\n    name: 'filter',\n    initialState,\n    reducers: {\n        changeOrder: (state, action: PayloadAction<string>)=> {\n            state.order = action.payload;\n        },\n        changeFilterBy: (state, action: PayloadAction<string>): any => {\n            state.filterBy = action.payload;\n        }\n    }\n});\n\nexport const {changeOrder, changeFilterBy} = filterSlice.actions;\n\nexport const selectOrderValue = (state: RootState) => state.filter.orderValue;\nexport const selectFilterBy = (state: RootState) => state.filter.filterBy;\nexport const selectOrder = (state: RootState) => state.filter.order.toUpperCase();\nexport const selectFilterByButtons = (state: RootState) => state.filter.filterByButtons;\n\nexport default filterSlice.reducer;","import React from 'react';\nimport { ButtonGroup, Button } from '@material-ui/core';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {selectFilterByButtons, selectFilterBy, changeFilterBy } from '../features/filter/filterSlice';\nimport { changeActivePage, fetchTask } from '../features/task/taskSlice';\n\nexport const  DoneSort = () => {\n    const filterByButtons = useSelector(selectFilterByButtons);\n    const filterBy = useSelector(selectFilterBy);\n    const dispatch = useDispatch();\n    return (\n    <ButtonGroup color=\"primary\" aria-label=\"outlined primary button group\">\n    {filterByButtons\n        .map(button => \n        <Button \n            key={button}\n            size=\"medium\"\n            variant={ filterBy === button ? \"contained\": undefined}\n            onClick={e => {dispatch(changeFilterBy(e.currentTarget.value)); dispatch(changeActivePage(1)); dispatch(fetchTask())}}\n            value={button}\n            >{button}</Button> )}\n    </ButtonGroup>\n    )\n};","import React from 'react';\nimport { ButtonGroup, Button } from '@material-ui/core';\nimport {useSelector, useDispatch} from 'react-redux';\nimport {selectOrder, selectOrderValue, changeOrder} from '../features/filter/filterSlice';\nimport { fetchTask } from '../features/task/taskSlice';\n\nexport const DateSort = () =>  {\n  const order = useSelector(selectOrder);\n  const orderValue = useSelector(selectOrderValue);\n  const dispatch = useDispatch();\n\n    return(<>\n    <ButtonGroup variant=\"text\" color=\"primary\" aria-label=\"text primary button group\">\n      {orderValue\n          .map(item => \n          <Button \n            key={item}\n            size=\"medium\"\n            variant={ order === item ? \"contained\" : undefined}\n            onClick={e => {dispatch(changeOrder(e.currentTarget.value)); dispatch(fetchTask())}}\n            value={item}\n            >{item}</Button>)}\n    </ButtonGroup>  \n      </>\n    )\n}","import React from \"react\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { ItemPerPageFilter } from '../../components/ItemPerPageFilter';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {DoneSort} from \"../../components/DoneSort\";\nimport {DateSort} from \"../../components/DateSort\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n\n  },\n  paper: {\n    paddingTop: theme.spacing(1),\n    paddingBottom: theme.spacing(2),\n    color: theme.palette.text.secondary,\n    justifyContent: 'space-between'\n  },\n}));\n\n\n\n\nexport const FilterPanel = ({onChangeItemFilter, itemPerPage}: any) => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.paper} >\n    <Grid container spacing={3}>\n      <Grid item xs={6}>\n        <DoneSort />\n      </Grid>\n      <Grid item xs={3} alignItems=\"center\" container>\n        <Typography variant=\"subtitle1\">Sort by:</Typography>\n        <DateSort />\n      </Grid>\n      <Grid item xs={3} alignItems=\"center\" container>\n        <Typography variant=\"subtitle1\">Page count</Typography>\n        <ItemPerPageFilter />\n      </Grid>\n    </Grid>\n    </div>\n\n  );\n}\n","import React, { useEffect} from  'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Container, Grid, List, LinearProgress} from '@material-ui/core';\nimport { CreateToDo }  from '../../components/CreateToDo';\nimport { Pagination } from '../../components/Pagination';\nimport { ToDoListItem } from './ToDoListItem';\nimport { FilterPanel } from '../filter/FilterPanel';\nimport { selectTasks, selectIsLoading, selectPageCount, Task,  createTask, fetchTask } from './taskSlice';\n\nexport const ToDoList = () => {\n  const tasks = useSelector(selectTasks);\n  const isLoading = useSelector(selectIsLoading);\n  const pageCount = useSelector(selectPageCount);\n  const dispatch = useDispatch()\n\n\n  useEffect(() => {\n    if(sessionStorage.token) {\n      dispatch(fetchTask());\n    }\n  }, [dispatch]);\n\n  const handleNewToDo = async (e: React.KeyboardEvent<HTMLDivElement> | \n    React.ChangeEvent<HTMLInputElement>) => {\n        const {key} = (e as React.KeyboardEvent<HTMLDivElement>);\n        const {target} = (e as React.ChangeEvent<HTMLInputElement>);\n        if (key === \"Enter\" && target.value.trim()) {          \n            dispatch(createTask(target.value));\n            target.value = '';\n          }\n    };\n\n  return(\n      <Container maxWidth=\"md\">\n        <Grid>\n          <Grid>\n            <CreateToDo handleNewToDo={handleNewToDo} />\n          </Grid>\n          <FilterPanel />\n          <Grid item alignItems=\"center\" container xs={12}>\n              {isLoading && (pageCount > 1 && <Pagination />) }\n          </Grid>\n          \n          {isLoading\n              ?  (<List>{tasks.map((task: Task) => <ToDoListItem key={task.id} task={task} />)}</List>)\n              :   <LinearProgress />}\n         \n        </Grid>\n      </Container>\n  );\n};","import React from 'react';\nimport { useField} from 'formik';\nimport { TextField, Grid  } from '@material-ui/core';\n\ninterface Values {\n  name: string;\n  label: string;\n  type?: string;\n  autoComplete?: string;\n}\n\nexport const Input = (props:Values) => {\n  const [field, meta] = useField(props);\n    return(\n        <Grid item >\n        <TextField\n          fullWidth\n          margin='normal'\n          error={(meta.touched && meta.error) ? true : false}\n          helperText={(meta.touched && meta.error) && meta.error}\n          variant=\"outlined\"\n          {...field}\n          {...props}\n        />\n        </Grid>\n    )\n};\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\nimport { instance } from '../../instance'\n\nexport const fetchUser: any =  createAsyncThunk(\n    'user/fetchToken',\n    async (user: {[userData: string]: string}, thunkAPI) => { \n        const res = await instance.post(`login`, user);\n        return res.data\n    }\n);\n\nexport const userRegistration: any = createAsyncThunk(\n    'user/registration',\n    async (user: {[userData: string]: string}, thunkAPI) => {\n        const res = await instance.post(`signup`, user);\n        return res.data \n    });\n\nexport interface User {\n    firstName: string;\n    lastName: string;\n    token: string;\n    email?: string;\n    password?: string;\n    isLoading?: boolean;\n    hasError?: boolean;\n}\n\nconst initialState: User = {\n    firstName: sessionStorage.firstName || '',\n    lastName: sessionStorage.lastName || '',\n    token: sessionStorage.token || '',\n    isLoading: true,\n    hasError: false\n};\n\nexport const userSlice = createSlice({\n    name: 'user',\n    initialState,\n    reducers: {\n        clearUserData: (state) => {\n            state.firstName = state.lastName = state.token = '';\n            state.isLoading = state.hasError = false;\n        }\n    },\n    extraReducers: {\n        [fetchUser.pending]: (state) => {\n            state.isLoading = false\n            state.hasError = false\n        },\n        [fetchUser.fulfilled]: (state, action: PayloadAction<User>) => {\n            state.token = action.payload.token;\n            state.firstName = action.payload.firstName;\n            state.lastName = action.payload.lastName;\n            sessionStorage.setItem('token', state.token);\n            sessionStorage.setItem('firstName', state.firstName);\n            sessionStorage.setItem('lastName', state.lastName);\n            state.isLoading = true;\n            state.hasError = false;\n        },\n        [fetchUser.rejected]: (state, action) => {\n            state.isLoading = false;\n            state.hasError = true;\n        },\n        [userRegistration.pending]: (state) => {\n            state.isLoading = false\n            state.hasError = false\n        },\n        [userRegistration.fulfilled]: (state, action: PayloadAction<User>) => {\n            state.token = action.payload.token;\n            state.firstName = action.payload.firstName;\n            state.lastName = action.payload.lastName;\n            sessionStorage.setItem('token', state.token);\n            sessionStorage.setItem('firstName', state.firstName);\n            sessionStorage.setItem('lastName', state.lastName);\n            state.isLoading = true;\n            state.hasError = false;\n        },\n        [userRegistration.rejected]: (state) => {\n            state.isLoading = false;\n            state.hasError = true;\n        }\n    }\n})\n\nexport const { clearUserData } = userSlice.actions;\n\nexport const selectToken = (state: RootState) => state.user.token;\nexport const selectFirstName = (state: RootState) => state.user.firstName;\nexport const selectLastName = (state: RootState) => state.user.lastName;\nexport const selectIsLoading = (state: RootState) => state.user.isLoading;\n\nexport default userSlice.reducer;","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\n\nexport interface Auth {\n    loginForm: boolean;\n    authStatus: boolean;\n};\n\nexport interface LoginInterface {\n    email: string;\n    password: string;\n};\n\nexport interface SignupInterface {\n    firstName: string;\n    lastName: string;\n    email: string;\n    password: string;\n}\n\nconst initialState: Auth ={ \n    loginForm: true,\n    authStatus: false\n};\n\nexport const authSlice = createSlice({\n    name:  'auth',\n    initialState,\n    reducers: {\n      toggleLoginForm: (state) => {\n          state.loginForm = !state.loginForm\n      },\n      toggleAuthStatus: (state, action: PayloadAction<boolean>) => {\n          state.authStatus = action.payload;\n      },\n      logOut: (state) =>  {\n        sessionStorage.clear();\n        state.authStatus = false;\n      }\n    }\n});\n\nexport const { toggleLoginForm, toggleAuthStatus, logOut  } = authSlice.actions;\n\nexport const selectLoginForm = (state: RootState)  => state.auth.loginForm;\nexport const selectAuthStatus = (state: RootState) => state.auth.authStatus;\n\nexport default authSlice.reducer;","import React from 'react';\nimport { Formik, Form  } from 'formik';\nimport * as Yup from 'yup';\nimport { Button, Grid  } from '@material-ui/core';\nimport { Input } from '../../components/Input';\nimport {useDispatch } from 'react-redux'\nimport { fetchUser } from '../user/userSlice';\nimport { toggleAuthStatus, LoginInterface } from './authSlice';\n\nexport const LogIn = () => {\n    const dispatch = useDispatch();\n\n    const initialValues: LoginInterface = {\n        email: '',\n        password: ''\n    };\n    return(\n        <Formik \n            initialValues={initialValues}\n            validationSchema={Yup.object({\n                email: Yup.string().email('Invalid email address').required('Required'),\n                password: Yup.string().min(8, 'Must be 8 characters or more').required('Required')\n            })}\n            onSubmit={(values: LoginInterface, { setSubmitting }) => {\n                dispatch(fetchUser(values));\n                dispatch(toggleAuthStatus(true))\n                setSubmitting(false);\n            }}>\n            <Form>\n            <Input name=\"email\" label=\"Email\"   />\n            <Input name=\"password\" label=\"Password\" type=\"password\" autoComplete=\"current-password\"   />\n            <Grid item>\n            <Button \n                variant=\"contained\" \n                color=\"primary\" \n                type=\"submit\"\n                fullWidth\n                >Log in</Button>\n            </Grid>\n            </Form>\n        </Formik>\n    )\n};","import React from 'react';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport { Button, Grid } from '@material-ui/core';\nimport { Input } from '../../components/Input';\nimport {useDispatch } from 'react-redux';\nimport { userRegistration } from '../user/userSlice';\nimport { toggleAuthStatus, SignupInterface } from './authSlice';\n\nexport const SignUp = () => {\n  const dispatch = useDispatch();\n\n  const initialValues: SignupInterface = {\n      firstName: '',\n      lastName: '',\n      email: '',\n      password: ''\n  }\n  return(\n        <Formik\n            initialValues={initialValues}\n            validationSchema={Yup.object({\n                firstName: Yup.string().required('Required'),\n                lastName: Yup.string().required('Required'),\n                email: Yup.string().email('Invalid email address').required('Required'),\n                password: Yup.string().min(8, 'Must be 8 characters or more').required('Required')})\n            }\n            onSubmit={(values: SignupInterface, { setSubmitting }) => {\n              dispatch(userRegistration(values));\n              dispatch(toggleAuthStatus(true))\n              setSubmitting(false);\n              }}>\n            <Form>\n              <Input name=\"firstName\" label=\"First name\" />\n              <Input name=\"lastName\" label=\"Last name\" />\n              <Input name=\"email\" label=\"Email\" />\n              <Input name=\"password\" label=\"Password\"  type=\"password\" autoComplete=\"current-password\" />\n              <Grid item >\n              <Button \n                variant=\"contained\" \n                color=\"primary\"\n                type=\"submit\"\n                fullWidth \n                >Sign up</Button>\n              </Grid>\n\n            </Form>\n        </Formik>\n    );\n};","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Grid } from '@material-ui/core';\nimport { LogIn } from './LogIn';\nimport { SignUp } from './SignUp';\nimport { selectLoginForm } from './authSlice';\n\nexport const Auth = () => {\n  const loginForm = useSelector(selectLoginForm);\n\n    return(\n        <Grid container spacing={10} justify=\"center\"   alignItems=\"center\" >\n        <Grid item xs={5} >  \n        {loginForm ? <LogIn /> : <SignUp/>}\n        </Grid>\n    </Grid>\n    )\n};","import React from 'react';\nimport { AppBar, Toolbar, Button, Typography, Grid } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {toggleLoginForm, selectLoginForm,  logOut, selectAuthStatus} from '../features/auth/authSlice';\nimport {selectLastName, selectFirstName, clearUserData, selectIsLoading} from '../features/user/userSlice';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      justifyContent: 'space-between'\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n    },\n  }));\n\nexport const NavBar = () => {\nconst LoginForm = useSelector(selectLoginForm);\n  const firstName = useSelector(selectFirstName);\n  const lastName = useSelector(selectLastName);\n  const authStatus = useSelector(selectAuthStatus)\n  const isLoading = useSelector(selectIsLoading);\n  const dispatch = useDispatch();\n\n  const classes = useStyles();\n\n  return(\n    <div className={classes.root}>\n      \n      <AppBar position=\"static\">\n      <Toolbar>\n      <Grid container alignItems=\"center\"   justify=\"space-between\">\n        <Grid item xs={3}>\n        <Typography variant=\"h6\" className={classes.title}>\n        To do list\n        </Typography>\n        </Grid>\n        {(authStatus && isLoading) && (<>\n          <Grid item xs={8}>\n          <Typography variant=\"body1\" align='right'>\n          {`${firstName} ${lastName}`}\n          </Typography>\n          </Grid>\n          <Grid item xs={1}>\n           <Button color=\"inherit\" onClick={() => dispatch(logOut())}>Log Out</Button>\n          </Grid>\n         </>\n        )}\n        <Grid item xs={1}>\n        {!(authStatus && isLoading) && <Button color=\"inherit\" onClick={() => {dispatch(toggleLoginForm()); dispatch(clearUserData()) } }>{LoginForm ? 'Sign up' : 'Login'}</Button>}\n        </Grid>\n        </Grid>\n      </Toolbar>\n    </AppBar>\n    </div>\n  )\n};","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\n\n\ninterface Error {\n    errorStatus: boolean;\n    statusCode: number | null;\n    message: string;\n    errorStack: {};\n}\n\n\nconst initialState: Error = {\n    errorStatus: false,\n    statusCode: null,\n    message: '',\n    errorStack: {}\n}\n\nconst errorSlice = createSlice({\n    name: 'error',\n    initialState,\n    reducers: {\n        createError: (state, action: PayloadAction<Error>) =>{\n            state.statusCode = action.payload.statusCode;\n            state.message = action.payload.message;\n            state.errorStatus = true;\n       },\n        closeError: (state, action: PayloadAction<string>) => {\n            if(action.payload === 'clickaway') return;\n            state.errorStatus = false;\n            state.message = state.message = '';\n            state.errorStack = {};\n        }\n    }\n});\n\nexport const { createError, closeError } = errorSlice.actions;\n\nexport const selectErrorStatus = (state: RootState) => state.error.errorStatus;\nexport const selectErrorStatusCode = (state: RootState) => state.error.statusCode;\nexport const selectErrorMesage = (state: RootState) => state.error.message;\nexport const selectErrorStack = (state: RootState) => state.error.errorStack;\n\nexport default errorSlice.reducer;","import React, {  useLayoutEffect } from 'react';\nimport {useSelector, useDispatch } from 'react-redux';\nimport {ToDoList} from './features/task/ToDoList';\nimport {Auth} from './features/auth/Auth';\nimport { instance } from './instance'; \nimport { Container, Snackbar } from '@material-ui/core';\nimport { Alert, AlertTitle } from '@material-ui/lab';\nimport { NavBar } from './components/NavBar';\nimport { selectAuthStatus} from './features/auth/authSlice';\nimport { selectIsLoading } from './features/user/userSlice';\nimport { closeError, selectErrorStatus, selectErrorStatusCode, selectErrorMesage, } from './features/error/errorSlice';\nimport {toggleAuthStatus} from './features/auth/authSlice';\nimport * as jwt from 'jsonwebtoken';\n\nfunction App() {\n  const authStatus = useSelector(selectAuthStatus);\n  const isLoading = useSelector(selectIsLoading);\n  const errorStatus = useSelector(selectErrorStatus);\n  const errorStatusCode = useSelector(selectErrorStatusCode);\n  const errorMessage = useSelector(selectErrorMesage);\n  const dispatch = useDispatch();\n\n  useLayoutEffect(() => {\n    const token = sessionStorage.getItem('token');\n    if(token !== null) {\n      const decode = jwt.decode(token.split(' ')[1]);\n      if (decode !== null && typeof decode !== 'string'){\n       if(Date.now() > decode.exp) dispatch(toggleAuthStatus(true));\n      }\n     instance.defaults.headers = {'Authorization': sessionStorage.getItem('token')};\n    }\n  });\n\n  return (\n    <Container>\n      <NavBar />\n      {(authStatus && isLoading) ? <ToDoList /> : <Auth />}\n      <Snackbar\n        open={errorStatus}\n        autoHideDuration={6000} \n        onClose={(event, reason) => dispatch(closeError(reason))}>\n          <Alert\n            severity=\"error\" > \n            <AlertTitle>{`Error ${errorStatusCode}`}</AlertTitle>\n            {errorMessage} \n          </Alert>\n        </Snackbar>     \n    </Container>\n  );\n};\n\nexport default App;","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport authClise from '../features/auth/authSlice';\nimport userSlice  from '../features/user/userSlice';\nimport filterSlice from '../features/filter/filterSlice';\nimport errorSlice from '../features/error/errorSlice';\nimport taskSlice from '../features/task/taskSlice';\n\n\nexport const store = configureStore({\n  reducer: {\n    auth: authClise,\n    user: userSlice,\n    filter: filterSlice,\n    error: errorSlice,\n    task: taskSlice\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport { instance } from './instance';\nimport { createError } from './features/error/errorSlice';\nimport { logOut } from './features/auth/authSlice';\n\ninstance.interceptors.request.use(request => {\n  return request;\n}, error =>{\n  return Promise.reject(error);\n});\n\ninstance.interceptors.response.use(undefined, (error) =>  {\n  if([422, 404, 400].includes(error.response?.status)){\n    store.dispatch(createError (error.response.data));\n    if(error.response.data.message === 'Invalid token') store.dispatch(logOut());\n    console.log(`interceptors:`, error.response.data);\n  } \n  return Promise.reject(error);\n});\n\nReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}