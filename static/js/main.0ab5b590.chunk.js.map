{"version":3,"sources":["instance.ts","features/task/taskSlice.ts","components/CreateToDo.tsx","components/Pagination.tsx","features/task/ToDoListItem.tsx","components/ItemPerPageFilter.tsx","features/filter/filterSlice.ts","components/DoneSort.tsx","components/DateSort.tsx","features/filter/FilterPanel.tsx","features/task/ToDoList.tsx","components/Input.tsx","features/user/userSlice.ts","features/auth/authSlice.ts","features/auth/LogIn.tsx","features/auth/SignUp.tsx","features/auth/Auth.tsx","components/NavBar.tsx","features/error/errorSlice.ts","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["instance","axios","create","baseURL","process","fetchTask","createAsyncThunk","params","a","get","order","filterBy","page","activePage","taskCount","itemPerPage","res","data","createTask","task","post","name","done","changeTaskName","changingName","patch","id","changeDoneStatus","changingDoneStatus","deleteTask","taskId","delete","taskSlice","createSlice","initialState","tasks","pageCount","isLoading","hasError","changeElement","reducers","changeActivePage","state","action","payload","extraReducers","pending","fulfilled","rejected","actions","selectTasks","selectPageCount","selectIsLoading","selectChangeElement","selectActivePage","CreateToDo","dispatch","useDispatch","TextField","margin","label","variant","size","fullWidth","type","onKeyPress","e","key","target","value","trim","handleNewToDo","Pagination","useSelector","pageArr","Array","fill","map","i","handleClick","currentTarget","Number","ButtonGroup","color","aria-label","Button","onClick","undefined","length","ToDoListItem","props","useState","changeInput","setChangeInput","disab","setDisab","showInput","date","createdAt","match","time","dateTime","replace","Grid","container","ListItem","item","xs","ListItemIcon","Checkbox","onChange","checked","defaultValue","autoFocus","onBlur","onKeyDown","changeTask","onKeyUp","ListItemText","primary","ListItemSecondaryAction","IconButton","edge","disabled","ItemPerPageFilter","onChangeItemFilter","Select","labelId","MenuItem","filterSlice","filterByButtons","orderValue","changeOrder","changeFilterBy","selectOrderValue","filter","selectFilterBy","selectOrder","toUpperCase","selectFilterByButtons","DoneSort","button","DateSort","useStyles","makeStyles","theme","root","flexGrow","paper","paddingTop","spacing","paddingBottom","palette","text","secondary","justifyContent","FilterPanel","classes","className","alignItems","Typography","ToDoList","setItemPerPage","useEffect","sessionStorage","token","Container","maxWidth","List","LinearProgress","Input","useField","field","meta","error","touched","helperText","fetchUser","user","thunkAPI","userRegistration","firstName","lastName","userSlice","clearUserData","setItem","selectFirstName","selectLastName","authSlice","loginForm","authStatus","toggleLoginForm","toggleAuthStatus","logOut","clear","selectLoginForm","auth","selectAuthStatus","LogIn","initialValues","email","password","validationSchema","Yup","required","min","onSubmit","values","setSubmitting","autoComplete","SignUp","Auth","justify","menuButton","marginRight","title","NavBar","LoginForm","AppBar","position","Toolbar","align","errorSlice","errorStatus","statusCode","message","errorStack","createError","closeError","selectErrorStatus","selectErrorStatusCode","selectErrorMesage","App","errorStatusCode","errorMessage","useLayoutEffect","getItem","decode","jwt","split","Date","now","exp","defaults","headers","Snackbar","open","autoHideDuration","onClose","event","reason","Alert","severity","AlertTitle","store","configureStore","reducer","authClise","Boolean","window","location","hostname","interceptors","request","use","Promise","reject","response","includes","status","console","log","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.0ab5b590.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport const instance = axios.create({\n    baseURL: process.env.REACT_APP_LINK\n});","import { RootState } from './../../app/store';\nimport { createAsyncThunk, PayloadAction, createSlice } from '@reduxjs/toolkit';\nimport { instance } from '../../instance';\n\nexport interface Task {\n        id: string;\n        name: string;\n        done: boolean;\n        createdAt: string;\n}\n\nexport interface Tasks {\n    tasks: Task[];\n    pageCount: number;\n    activePage: number;\n};\n\ninterface TaskState extends Tasks {\n    isLoading: boolean;\n    hasError: boolean;\n    changeElement: any;\n};\n\ninterface GetParams {\n    order: string;\n    filterBy: string;\n    activePage: string;\n    itemPerPage: number;\n};\n\nexport const fetchTask: any = createAsyncThunk(\n    'task/fetchToken',\n    async (params: GetParams) => {\n        const res = await instance.get<Task>('tasks', {params: {\n            order: params.order,\n            filterBy: params.filterBy,\n            page: params.activePage,\n            taskCount: params.itemPerPage\n        }} );\n        return res.data\n    });\n\nexport const createTask: any = createAsyncThunk(\n    'task/createTask',\n    async (task: string) => {\n        const res = await instance.post('task', {name: task, done: false});\n        return res.data;\n    }\n);\n\nexport const changeTaskName: any = createAsyncThunk(\n    'task/changeTaskName',\n    async (changingName: {id: string, name: string} ) => {\n        const res = await instance.patch(`task/${changingName.id}`, {name: changingName.name});\n        return res.data;\n    }\n);\n\nexport const changeDoneStatus: any = createAsyncThunk(\n    'task/changeDoneStatus',\n    async(changingDoneStatus: {id: string, done: boolean}) => {\n        const res = await instance.patch(`task/${changingDoneStatus.id}`, {done: changingDoneStatus.done});\n        return res.data;\n    }\n);\n\nexport const deleteTask: any = createAsyncThunk(\n    'task/deketetask',\n    async(taskId: string) => {\n        const res = await instance.delete(`task/${taskId}`);\n        return res.data;\n    }\n);\n\nconst initialState: TaskState = {\n    tasks: [],\n    pageCount: 1,\n    activePage:1, \n    isLoading: false,\n    hasError: false,\n    changeElement: null\n};\n\nexport const taskSlice  = createSlice({\n    name: 'task',\n    initialState,\n    reducers: {\n        changeActivePage: (state, action: PayloadAction<number>) => {\n            state.activePage = action.payload;\n        }\n    },\n    extraReducers: {\n        [fetchTask.pending]: (state) => {\n            state.isLoading = false;\n            state.hasError = false;\n        },\n        [fetchTask.fulfilled]: (state, action: PayloadAction<Tasks>) => {\n            state.tasks = action.payload.tasks;\n            state.pageCount = action.payload.pageCount;\n            state.isLoading = true;\n            state.hasError = false;\n        },\n        [fetchTask.rejected]: (state) => {\n            state.isLoading = false;\n            state.hasError = true;\n        },\n        [createTask.pending]: (state) => {\n            state.isLoading = true;\n        },\n        [createTask.fulfilled]: (state) => {\n            state.changeElement = !state.changeElement\n        },\n        [createTask.rejected]: (state) => {\n            state.hasError = true\n        },\n        [changeTaskName.pending]: (state) => {\n        },\n        [changeTaskName.fulfilled]: (state) => {\n            state.changeElement = !state.changeElement\n        },\n        [changeTaskName.rejected]: (state) => {\n            state.hasError = true;\n        },\n        [changeDoneStatus.pending]: (state) => {\n            state.isLoading = true;\n        },\n        [changeDoneStatus.fulfilled]: (state) => {\n            state.changeElement = !state.changeElement\n        },\n        [changeDoneStatus.rejected]: (state) => {\n            state.hasError = true\n        },\n        [deleteTask.pending]: (state) => {\n            state.isLoading = true;\n        },\n        [deleteTask.fulfilled]: (state) => {\n            state.changeElement = !state.changeElement\n        },\n        [deleteTask.rejected]: (state)=> {\n            state.hasError = true\n        }\n    }\n});\n\nexport const {changeActivePage} = taskSlice.actions;\n\nexport const selectTasks = (state: RootState) => state.task.tasks;\nexport const selectPageCount = (state: RootState) => state.task.pageCount;\nexport const selectIsLoading = (state: RootState) => state.task.isLoading;\nexport const selectChangeElement = (state: RootState) => state.task.changeElement;\nexport const selectActivePage = (state: RootState) => state.task.activePage;\n\nexport default taskSlice.reducer;","import React from 'react';\nimport { TextField } from '@material-ui/core';\nimport { useDispatch } from 'react-redux';\nimport { createTask } from '../features/task/taskSlice';\n\nexport const  CreateToDo = () =>  {\n    const dispatch = useDispatch();\n    \n    const handleNewToDo = (e: React.KeyboardEvent<HTMLDivElement> | \n        React.ChangeEvent<HTMLInputElement>) => {\n            const {key} = (e as React.KeyboardEvent<HTMLDivElement>);\n            const {target} = (e as React.ChangeEvent<HTMLInputElement>);\n            if (key === \"Enter\" && target.value.trim()) {\n                dispatch(createTask(target.value))\n                target.value = '';\n              }\n      };\n    return (\n        <TextField \n        margin='normal'\n        id=\"outlined-basic\" \n        label=\"New to do\" \n        variant=\"outlined\" \n        size=\"small\" \n        fullWidth \n        type=\"text\" \n        onKeyPress={e =>handleNewToDo(e)} \n        />\n        )\n}\n","import React from 'react';\nimport { ButtonGroup, Button } from '@material-ui/core';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { changeActivePage, selectPageCount, selectActivePage } from '../features/task/taskSlice';\n\n\n\n\nexport const  Pagination = () =>  {\n    const dispatch = useDispatch();\n    const activePage = useSelector(selectActivePage);\n    const pageCount = useSelector(selectPageCount);\n    const pageArr = new Array(pageCount).fill(1).map((e, i) => i + 1);\n    const handleClick = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        if (typeof e.currentTarget.value === 'string') {\n            dispatch(changeActivePage(Number(e.currentTarget.value)))\n        }\n    };\n    return (\n        <ButtonGroup\n            color=\"primary\" \n            aria-label=\"contained button group\">            \n            <Button \n                onClick={e => handleClick(e)} \n                value={1}\n                ><ArrowBackIcon /></Button>\n                {pageArr.map(page => \n                                <Button \n                                    key={`item-${page}`} \n                                    onClick={e => handleClick(e)}\n                                    value={page}\n                                    variant={ activePage === page ? 'contained' : undefined}\n                                    >{page}</Button>)}\n            <Button\n            onClick={e => handleClick(e)} \n            value={pageArr.length}\n            ><ArrowForwardIcon /></Button>\n        </ButtonGroup>\n    );\n};","import React, { useState } from 'react';\nimport { ListItemText , ListItem, ListItemIcon, ListItemSecondaryAction, IconButton, Checkbox, Input, Grid } from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { useDispatch } from 'react-redux';\nimport { deleteTask, changeDoneStatus, Task } from './taskSlice';\nimport {changeTaskName} from './taskSlice';\n\nexport const ToDoListItem = (props: {task: Task} ) => {\n  const {task} = props;\n  const dispatch = useDispatch();\n  const [changeInput, setChangeInput] = useState(false);\n  const [disab, setDisab] = useState(false);\n  const showInput = () => {\n    setChangeInput(!changeInput);\n  }; \n  const buttonDisabled = () => {\n    setDisab(true);\n  };\n\n  const changeTask = (e: React.KeyboardEvent<HTMLDivElement> | \n    React.ChangeEvent<HTMLInputElement>) =>  { \n      const {key} = (e as React.KeyboardEvent<HTMLDivElement>);\n      const {target} = (e as React.ChangeEvent<HTMLInputElement>);\n      if (key === 'Enter' && target.value.trim()){\n        dispatch(changeTaskName({id: target.name, name: target.value}));\n      }\n  };\n\n  const date = task.createdAt.match(/([12]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01]))/);\n  const time = task.createdAt.match(/T(((([0-1][0-9])|(2[0-3])):?[0-5][0-9]))/g);\n  const dateTime: string =  date !== null && time !== null ? `${time[0].replace('T', '')} ${date[0]}`: \"Not date\";\n\n return(\n   <Grid container>\n    <ListItem>\n      <Grid item xs={1}>\n      <ListItemIcon>\n        <Checkbox \n          color=\"primary\"  \n          onChange={(e)=> dispatch(changeDoneStatus({id: e.target.value, done: e.target.checked}))} \n          checked={task.done} \n          value={task.id} \n        />\n      </ListItemIcon>\n      </Grid>\n      <Grid item xs={8}>\n      {changeInput \n        ? (<Input\n            fullWidth\n            defaultValue={task.name}\n            autoFocus={true}\n            name={task.id}\n            onBlur={() => showInput()} \n            onKeyDown={(e: React.KeyboardEvent<HTMLInputElement>) => e.key === \"Escape\" && setChangeInput(false)} \n            onKeyPress={e => changeTask(e)}\n            onKeyUp={(e: React.KeyboardEvent<HTMLInputElement>) => e.key === \"Enter\" &&  setChangeInput(false)}\n          />) \n        : (<ListItemText  \n            primary={task.name}  \n            onClick={() => showInput()}\n          />)\n      }\n      </Grid>\n        <Grid item xs={2}>\n        <ListItemText  primary={dateTime} />\n        </Grid>\n      <Grid item xs={1}>\n        <ListItemSecondaryAction>\n                    <IconButton \n                      edge=\"end\" \n                      disabled={disab} \n                      aria-label=\"delete\" \n                      onClick={(e) => {dispatch(deleteTask(e.currentTarget.value)); buttonDisabled()}} \n                      value={task.id}>\n                      <DeleteIcon />\n                    </IconButton>\n        </ListItemSecondaryAction>\n        </Grid>\n        </ListItem>\n   </Grid>\n      \n )   \n};","import React from 'react';\nimport { Select, MenuItem } from \"@material-ui/core\";\n\nexport const ItemPerPageFilter = (props:{onChangeItemFilter: () => number, itemPerPage: number}) => {\n  const {onChangeItemFilter, itemPerPage} = props;\n  return(\n    <Select\n      labelId=\"demo-simple-select-label\"\n      id=\"demo-simple-select\"\n      value={itemPerPage}\n      onChange={onChangeItemFilter}\n    >\n      <MenuItem value={5}>5</MenuItem>\n      <MenuItem value={10}>10</MenuItem>\n      <MenuItem value={20}>20</MenuItem>\n    </Select>\n  )\n}","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\n\n\n\nconst initialState = {\n    filterByButtons: ['all', 'done', 'undone'],\n    filterBy: 'all',\n    orderValue: ['ASC', 'DESC'],\n    order: 'DESC'\n};\n\nexport const  filterSlice = createSlice({\n    name: 'filter',\n    initialState,\n    reducers: {\n        changeOrder: (state, action: PayloadAction<string>)=> {\n            state.order = action.payload;\n        },\n        changeFilterBy: (state, action: PayloadAction<string>): any => {\n            state.filterBy = action.payload;\n        }\n    }\n});\n\nexport const {changeOrder, changeFilterBy} = filterSlice.actions;\n\nexport const selectOrderValue = (state: RootState) => state.filter.orderValue;\nexport const selectFilterBy = (state: RootState) => state.filter.filterBy;\nexport const selectOrder = (state: RootState) => state.filter.order.toUpperCase();\nexport const selectFilterByButtons = (state: RootState) => state.filter.filterByButtons;\n\nexport default filterSlice.reducer;","import React from 'react';\nimport { ButtonGroup, Button } from '@material-ui/core';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {selectFilterByButtons, selectFilterBy, changeFilterBy } from '../features/filter/filterSlice';\nimport { changeActivePage } from '../features/task/taskSlice';\n\n\nexport const  DoneSort = () => {\n    const filterByButtons = useSelector(selectFilterByButtons);\n    const filterBy = useSelector(selectFilterBy);\n    const dispatch = useDispatch();\n    return (\n    <ButtonGroup color=\"primary\" aria-label=\"outlined primary button group\">\n    {filterByButtons\n        .map(button => \n        <Button \n            key={button}\n            size=\"medium\"\n            variant={ filterBy === button ? \"contained\": undefined}\n            onClick={e => {dispatch(changeFilterBy(e.currentTarget.value)); dispatch(changeActivePage(1))}}\n            value={button}\n            >{button}</Button> )}\n    </ButtonGroup>\n    )\n}","import React from 'react';\nimport { ButtonGroup, Button } from '@material-ui/core';\nimport {useSelector, useDispatch} from 'react-redux';\nimport {selectOrder, selectOrderValue, changeOrder} from '../features/filter/filterSlice';\n\nexport const DateSort = () =>  {\n  const order = useSelector(selectOrder);\n  const orderValue = useSelector(selectOrderValue);\n  const dispatch = useDispatch();\n\n    return(<>\n    <ButtonGroup variant=\"text\" color=\"primary\" aria-label=\"text primary button group\">\n      {orderValue\n          .map(item => \n          <Button \n            key={item}\n            size=\"medium\"\n            variant={ order === item ? \"contained\" : undefined}\n            onClick={e => dispatch(changeOrder(e.currentTarget.value))}\n            value={item}\n            >{item}</Button>)}\n    </ButtonGroup>  \n      </>\n    )\n}","import React from \"react\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { ItemPerPageFilter } from '../../components/ItemPerPageFilter';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {DoneSort} from \"../../components/DoneSort\";\nimport {DateSort} from \"../../components/DateSort\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n\n  },\n  paper: {\n    paddingTop: theme.spacing(1),\n    paddingBottom: theme.spacing(2),\n    color: theme.palette.text.secondary,\n    justifyContent: 'space-between'\n  },\n}));\n\n\n\n\nexport const FilterPanel = ({onChangeItemFilter, itemPerPage}: any) => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.paper} >\n    <Grid container spacing={3}>\n      <Grid item xs={6}>\n        <DoneSort />\n      </Grid>\n      <Grid item xs={3} alignItems=\"center\" container>\n        <Typography variant=\"subtitle1\">Sort by:</Typography>\n        <DateSort />\n      </Grid>\n      <Grid item xs={3} alignItems=\"center\" container>\n        <Typography variant=\"subtitle1\">Page count</Typography>\n        <ItemPerPageFilter  onChangeItemFilter={onChangeItemFilter} itemPerPage={itemPerPage}/>\n      </Grid>\n    </Grid>\n    </div>\n\n  );\n}\n","import React, {  useState,  useEffect} from  'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Container, Grid, List, LinearProgress} from '@material-ui/core';\nimport { CreateToDo }  from '../../components/CreateToDo';\nimport { Pagination } from '../../components/Pagination';\nimport { ToDoListItem } from './ToDoListItem';\nimport { FilterPanel } from '../filter/FilterPanel';\nimport {selectOrder, selectFilterBy} from '../filter/filterSlice';\nimport { fetchTask, selectTasks, selectIsLoading, selectPageCount, selectChangeElement, selectActivePage, Task, changeActivePage } from './taskSlice';\n\n\nexport const ToDoList = () => {\n  const [itemPerPage, setItemPerPage] = useState(5);\n  const order = useSelector(selectOrder);\n  const filterBy = useSelector(selectFilterBy);\n  const tasks = useSelector(selectTasks);\n  const isLoading = useSelector(selectIsLoading);\n  const pageCount = useSelector(selectPageCount);\n  const changeElement = useSelector(selectChangeElement);\n  const activePage = useSelector(selectActivePage);\n  const dispatch =useDispatch()\n\n  useEffect(() => {\n    if(sessionStorage.token) {\n      dispatch(fetchTask({\n        order,\n        filterBy,\n        activePage,\n        itemPerPage\n      }))\n    }\n  }, [dispatch, changeElement, activePage, order, filterBy, itemPerPage]);\n\n\n  const changeItemPerPageFilter = (e: any) => {\n      setItemPerPage(e.target.value);\n      dispatch(changeActivePage(1))\n  };\n\n  return(\n      <Container maxWidth=\"md\">\n        <Grid>\n        <Grid>\n          <CreateToDo />\n          </Grid>\n          <FilterPanel  \n              onChangeItemFilter={changeItemPerPageFilter}\n              itemPerPage={itemPerPage} />\n          <Grid item alignItems=\"center\" container xs={12}>\n              {isLoading && (pageCount > 1 && <Pagination />) }\n          </Grid>\n          <List>\n      {isLoading\n              ?  (tasks.map((task: Task) => <ToDoListItem key={task.id} task={task} />)) \n              :   <LinearProgress />\n              }\n          </List>\n        </Grid>\n      </Container>\n  );\n};","import React from 'react';\nimport { useField} from 'formik';\nimport { TextField, Grid  } from '@material-ui/core';\n\ninterface Values {\n  name: string;\n  label: string;\n  type?: string;\n  autoComplete?: string;\n}\n\nexport const Input = (props:Values) => {\n  const [field, meta] = useField(props);\n    return(\n        <Grid item >\n        <TextField\n          fullWidth\n          margin='normal'\n          error={(meta.touched && meta.error) ? true : false}\n          helperText={(meta.touched && meta.error) && meta.error}\n          variant=\"outlined\"\n          {...field}\n          {...props}\n        />\n        </Grid>\n    )\n};\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\nimport { instance } from '../../instance'\n\nexport const fetchUser: any =  createAsyncThunk(\n    'user/fetchToken',\n    async (user: {[userData: string]: string}, thunkAPI) => { \n        const res = await instance.post(`login`, user);\n        return res.data\n    }\n);\n\nexport const userRegistration: any = createAsyncThunk(\n    'user/registration',\n    async (user: {[userData: string]: string}, thunkAPI) => {\n        const res = await instance.post(`signup`, user);\n        return res.data \n    });\n\nexport interface User {\n    firstName: string;\n    lastName: string;\n    token: string;\n    email?: string;\n    password?: string;\n    isLoading?: boolean;\n    hasError?: boolean;\n}\n\nconst initialState: User = {\n    firstName: sessionStorage.firstName || '',\n    lastName: sessionStorage.lastName || '',\n    token: sessionStorage.token || '',\n    isLoading: true,\n    hasError: false\n};\n\nexport const userSlice = createSlice({\n    name: 'user',\n    initialState,\n    reducers: {\n        clearUserData: (state) => {\n            state.firstName = state.lastName = state.token = '';\n            state.isLoading = state.hasError = false;\n        }\n    },\n    extraReducers: {\n        [fetchUser.pending]: (state) => {\n            state.isLoading = false\n            state.hasError = false\n        },\n        [fetchUser.fulfilled]: (state, action: PayloadAction<User>) => {\n            state.token = action.payload.token;\n            state.firstName = action.payload.firstName;\n            state.lastName = action.payload.lastName;\n            sessionStorage.setItem('token', state.token);\n            sessionStorage.setItem('firstName', state.firstName);\n            sessionStorage.setItem('lastName', state.lastName);\n            state.isLoading = true;\n            state.hasError = false;\n        },\n        [fetchUser.rejected]: (state, action) => {\n            state.isLoading = false;\n            state.hasError = true;\n        },\n        [userRegistration.pending]: (state) => {\n            state.isLoading = false\n            state.hasError = false\n        },\n        [userRegistration.fulfilled]: (state, action: PayloadAction<User>) => {\n            state.token = action.payload.token;\n            state.firstName = action.payload.firstName;\n            state.lastName = action.payload.lastName;\n            sessionStorage.setItem('token', state.token);\n            sessionStorage.setItem('firstName', state.firstName);\n            sessionStorage.setItem('lastName', state.lastName);\n            state.isLoading = true;\n            state.hasError = false;\n        },\n        [userRegistration.rejected]: (state) => {\n            state.isLoading = false;\n            state.hasError = true;\n        }\n    }\n})\n\nexport const { clearUserData } = userSlice.actions;\n\nexport const selectToken = (state: RootState) => state.user.token;\nexport const selectFirstName = (state: RootState) => state.user.firstName;\nexport const selectLastName = (state: RootState) => state.user.lastName;\nexport const selectIsLoading = (state: RootState) => state.user.isLoading;\n\nexport default userSlice.reducer;","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\n\nexport interface Auth {\n    loginForm: boolean;\n    authStatus: boolean;\n};\n\nexport interface LoginInterface {\n    email: string;\n    password: string;\n};\n\nexport interface SignupInterface {\n    firstName: string;\n    lastName: string;\n    email: string;\n    password: string;\n}\n\nconst initialState: Auth ={ \n    loginForm: true,\n    authStatus: false\n};\n\nexport const authSlice = createSlice({\n    name:  'auth',\n    initialState,\n    reducers: {\n      toggleLoginForm: (state) => {\n          state.loginForm = !state.loginForm\n      },\n      toggleAuthStatus: (state, action: PayloadAction<boolean>) => {\n          state.authStatus = action.payload;\n      },\n      logOut: (state) =>  {\n        sessionStorage.clear();\n        state.authStatus = false;\n      }\n    }\n});\n\nexport const { toggleLoginForm, toggleAuthStatus, logOut  } = authSlice.actions;\n\nexport const selectLoginForm = (state: RootState)  => state.auth.loginForm;\nexport const selectAuthStatus = (state: RootState) => state.auth.authStatus;\n\nexport default authSlice.reducer;","import React from 'react';\nimport { Formik, Form  } from 'formik';\nimport * as Yup from 'yup';\nimport { Button, Grid  } from '@material-ui/core';\nimport { Input } from '../../components/Input';\nimport {useDispatch } from 'react-redux'\nimport { fetchUser } from '../user/userSlice';\nimport { toggleAuthStatus, LoginInterface } from './authSlice';\n\nexport const LogIn = () => {\n    const dispatch = useDispatch();\n\n    const initialValues: LoginInterface = {\n        email: '',\n        password: ''\n    };\n    return(\n        <Formik \n            initialValues={initialValues}\n            validationSchema={Yup.object({\n                email: Yup.string().email('Invalid email address').required('Required'),\n                password: Yup.string().min(8, 'Must be 8 characters or more').required('Required')\n            })}\n            onSubmit={(values: LoginInterface, { setSubmitting }) => {\n                dispatch(fetchUser(values));\n                dispatch(toggleAuthStatus(true))\n                setSubmitting(false);\n            }}>\n            <Form>\n            <Input name=\"email\" label=\"Email\"   />\n            <Input name=\"password\" label=\"Password\" type=\"password\" autoComplete=\"current-password\"   />\n            <Grid item>\n            <Button \n                variant=\"contained\" \n                color=\"primary\" \n                type=\"submit\"\n                fullWidth\n                >Log in</Button>\n            </Grid>\n            </Form>\n        </Formik>\n    )\n};","import React from 'react';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport { Button, Grid } from '@material-ui/core';\nimport { Input } from '../../components/Input';\nimport {useDispatch } from 'react-redux';\nimport { userRegistration } from '../user/userSlice';\nimport { toggleAuthStatus, SignupInterface } from './authSlice';\n\nexport const SignUp = () => {\n  const dispatch = useDispatch();\n\n  const initialValues: SignupInterface = {\n      firstName: '',\n      lastName: '',\n      email: '',\n      password: ''\n  }\n  return(\n        <Formik\n            initialValues={initialValues}\n            validationSchema={Yup.object({\n                firstName: Yup.string().required('Required'),\n                lastName: Yup.string().required('Required'),\n                email: Yup.string().email('Invalid email address').required('Required'),\n                password: Yup.string().min(8, 'Must be 8 characters or more').required('Required')})\n            }\n            onSubmit={(values: SignupInterface, { setSubmitting }) => {\n              dispatch(userRegistration(values));\n              dispatch(toggleAuthStatus(true))\n              setSubmitting(false);\n              }}>\n            <Form>\n              <Input name=\"firstName\" label=\"First name\" />\n              <Input name=\"lastName\" label=\"Last name\" />\n              <Input name=\"email\" label=\"Email\" />\n              <Input name=\"password\" label=\"Password\"  type=\"password\" autoComplete=\"current-password\" />\n              <Grid item >\n              <Button \n                variant=\"contained\" \n                color=\"primary\"\n                type=\"submit\"\n                fullWidth \n                >Sign up</Button>\n              </Grid>\n\n            </Form>\n        </Formik>\n    );\n};","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Grid } from '@material-ui/core';\nimport { LogIn } from './LogIn';\nimport { SignUp } from './SignUp';\nimport { selectLoginForm } from './authSlice';\n\nexport const Auth = () => {\n  const loginForm = useSelector(selectLoginForm);\n\n    return(\n        <Grid container spacing={10} justify=\"center\"   alignItems=\"center\" >\n        <Grid item xs={5} >  \n        {loginForm ? <LogIn /> : <SignUp/>}\n        </Grid>\n    </Grid>\n    )\n};","import React from 'react';\nimport { AppBar, Toolbar, Button, Typography, Grid } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {toggleLoginForm, selectLoginForm,  logOut, selectAuthStatus} from '../features/auth/authSlice';\nimport {selectLastName, selectFirstName, clearUserData, selectIsLoading} from '../features/user/userSlice';\n\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      justifyContent: 'space-between'\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n    },\n  }));\n\n\nexport const NavBar = () => {\nconst LoginForm = useSelector(selectLoginForm);\n  const firstName = useSelector(selectFirstName);\n  const lastName = useSelector(selectLastName);\n  const authStatus = useSelector(selectAuthStatus)\n  const isLoading = useSelector(selectIsLoading);\n  const dispatch = useDispatch();\n\n  const classes = useStyles();\n\n  return(\n    <div className={classes.root}>\n      \n      <AppBar position=\"static\">\n      <Toolbar>\n      <Grid container alignItems=\"center\"   justify=\"space-between\">\n        <Grid item xs={3}>\n        <Typography variant=\"h6\" className={classes.title}>\n        To do list\n        </Typography>\n        </Grid>\n        {(authStatus && isLoading) && (<>\n          <Grid item xs={8}>\n          <Typography variant=\"body1\" align='right'>\n          {`${firstName} ${lastName}`}\n          </Typography>\n          </Grid>\n          <Grid item xs={1}>\n           <Button color=\"inherit\" onClick={() => dispatch(logOut())}>Log Out</Button>\n          </Grid>\n         </>\n        )}\n        <Grid item xs={1}>\n        {!(authStatus && isLoading) && <Button color=\"inherit\" onClick={() => {dispatch(toggleLoginForm()); dispatch(clearUserData()) } }>{LoginForm ? 'Sign up' : 'Login'}</Button>}\n        </Grid>\n        </Grid>\n      </Toolbar>\n    </AppBar>\n    </div>\n\n  )\n\n\n};\n\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\n\n\ninterface Error {\n    errorStatus: boolean;\n    statusCode: number | null;\n    message: string;\n    errorStack: {};\n}\n\n\nconst initialState: Error = {\n    errorStatus: false,\n    statusCode: null,\n    message: '',\n    errorStack: {}\n}\n\nconst errorSlice = createSlice({\n    name: 'error',\n    initialState,\n    reducers: {\n        createError: (state, action: PayloadAction<Error>) =>{\n            state.statusCode = action.payload.statusCode;\n            state.message = action.payload.message;\n            state.errorStatus = true;\n       },\n        closeError: (state, action: PayloadAction<string>) => {\n            if(action.payload === 'clickaway') return;\n            state.errorStatus = false;\n            state.message = state.message = '';\n            state.errorStack = {};\n        }\n    }\n});\n\nexport const { createError, closeError } = errorSlice.actions;\n\nexport const selectErrorStatus = (state: RootState) => state.error.errorStatus;\nexport const selectErrorStatusCode = (state: RootState) => state.error.statusCode;\nexport const selectErrorMesage = (state: RootState) => state.error.message;\nexport const selectErrorStack = (state: RootState) => state.error.errorStack;\n\nexport default errorSlice.reducer;","import React, {  useLayoutEffect } from 'react';\nimport {useSelector, useDispatch } from 'react-redux';\nimport {ToDoList} from './features/task/ToDoList';\nimport {Auth} from './features/auth/Auth';\nimport { instance } from './instance'; \nimport { Container, Snackbar } from '@material-ui/core';\nimport { Alert, AlertTitle } from '@material-ui/lab';\nimport { NavBar } from './components/NavBar';\nimport { selectAuthStatus} from './features/auth/authSlice';\nimport { selectIsLoading } from './features/user/userSlice';\nimport { closeError, selectErrorStatus, selectErrorStatusCode, selectErrorMesage, } from './features/error/errorSlice';\nimport {toggleAuthStatus} from './features/auth/authSlice';\nimport * as jwt from 'jsonwebtoken';\n\n\nfunction App() {\n  const authStatus = useSelector(selectAuthStatus);\n  const isLoading = useSelector(selectIsLoading);\n  const errorStatus = useSelector(selectErrorStatus);\n  const errorStatusCode = useSelector(selectErrorStatusCode);\n  const errorMessage = useSelector(selectErrorMesage);\n  const dispatch = useDispatch();\n\n  useLayoutEffect(() => {\n    const token = sessionStorage.getItem('token');\n    if(token !== null) {\n      const decode = jwt.decode(token.split(' ')[1]);\n      if (decode !== null && typeof decode !== 'string'){\n       if(Date.now() > decode.exp) dispatch(toggleAuthStatus(true));\n      }\n     instance.defaults.headers = {'Authorization': sessionStorage.getItem('token')};\n    }\n  });\n\n  return (\n    <Container>\n      <NavBar />\n      {(authStatus && isLoading) && <ToDoList />}\n      {!(authStatus && isLoading) && <Auth />}\n      <Snackbar\n        open={errorStatus}\n        autoHideDuration={6000} \n        onClose={(event, reason) => dispatch(closeError(reason))}>\n          <Alert\n            severity=\"error\" > \n            <AlertTitle>{`Error ${errorStatusCode}`}</AlertTitle>\n            {errorMessage} \n          </Alert>\n        </Snackbar>     \n    </Container>\n  );\n};\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport authClise from '../features/auth/authSlice';\nimport userSlice  from '../features/user/userSlice';\nimport filterSlice from '../features/filter/filterSlice';\nimport errorSlice from '../features/error/errorSlice';\nimport taskSlice from '../features/task/taskSlice';\n\n\nexport const store = configureStore({\n  reducer: {\n    auth: authClise,\n    user: userSlice,\n    filter: filterSlice,\n    error: errorSlice,\n    task: taskSlice\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport { instance } from './instance';\nimport { createError } from './features/error/errorSlice';\nimport { logOut } from './features/auth/authSlice';\n\ninstance.interceptors.request.use(request => {\n  return request;\n}, error =>{\n  return Promise.reject(error);\n});\n\ninstance.interceptors.response.use(undefined, (error) =>  {\n  if([422, 404, 400].includes(error.response?.status)){\n    store.dispatch(createError (error.response.data));\n    if(error.response.data.message === 'Invalid token') store.dispatch(logOut());\n    console.log(`interceptors:`, error.response.data);\n  } \n  return Promise.reject(error);\n});\n\nReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}